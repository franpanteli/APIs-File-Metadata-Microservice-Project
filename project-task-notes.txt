These are my notes on the project task page. This project is called "Exercise Tracker." The URL for the page which these notes are on is https://www.freecodecamp.org/learn/back-end-development-and-apis/back-end-development-and-apis-projects/exercise-tracker

- We are building a full-stack JavaScript application:
	-> This must be similar in functionality to this https://exercise-tracker.freecodecamp.rocks/
	-> For the `date` property, the `toDateString` method can be used 
	-> This method belongs to the `Date` API 

- Methods to write this code:
	Method #1: clone the boilerplate code from their GitHub repository 
		-> Complete the exercise locally
		-> Start on this boilerplate code https://github.com/freeCodeCamp/boilerplate-project-exercisetracker/

	Method #2: They have a Gitpod starter project which you can use to complete the project

	Method #3: Using a site builder
		-> They don't specify which site builder 
		-> You can use a site builder to complete the project
		-> It needs to include all of the files from the project GitHub boilerplate code
		-> These files need to be included for the assessment tests when the project is submitted 

- An example structure response: 

    Input exercise into the tracker:
    {
      username: "fcc_test",
      description: "test",
      duration: 60,
      date: "Mon Jan 01 1990",
      _id: "5fb5853f734231456ccb3b05"
    }

    Input user into the tracker:
    {
      username: "fcc_test",
      _id: "5fb5853f734231456ccb3b05"
    }

    The log which this should produce:
    {
      username: "fcc_test",
      count: 1,
      _id: "5fb5853f734231456ccb3b05",
      log: [{
        description: "test",
        duration: 60,
        date: "Mon Jan 01 1990",
      }]
    }

Application tests: 
  -> You should provide your own project, not the example URL
  -> You can POST to /api/users with form data username to create a new user
  -> Waiting:The returned response from POST /api/users with form data username will be an object with username and _id properties
  -> Waiting:You can make a GET request to /api/users to get a list of all users
  -> Waiting:The GET request to /api/users returns an array
  -> Each element in the array returned from GET /api/users is an object literal containing a user's username and _id
  -> You can POST to /api/users/:_id/exercises with form data description, duration, and optionally date. If no date is supplied, the current date will be used
  -> Waiting:The response returned from POST /api/users/:_id/exercises will be the user object with the exercise fields added
  -> Waiting:You can make a GET request to /api/users/:_id/logs to retrieve a full exercise log of any user
  -> Waiting:A request to a user's log GET /api/users/:_id/logs returns a user object with a count property representing the number of exercises that belong to that user
  -> A GET request to /api/users/:_id/logs will return the user object with a log array of all the exercises added
  -> Each item in the log array that is returned from GET /api/users/:_id/logs is an object that should have a description, duration, and date properties
  -> Waiting:The description property of any object in the log array that is returned from GET /api/users/:_id/logs should be a string
  -> The duration property of any object in the log array that is returned from GET /api/users/:_id/logs should be a number
  -> The date property of any object in the log array that is returned from GET /api/users/:_id/logs should be a string. Use the dateString format of the Date API
  -> You can add from, to and limit parameters to a GET /api/users/:_id/logs request to retrieve part of the log of any user. from and to are dates in yyyy-mm-dd format. limit is an integer of how many logs to send back